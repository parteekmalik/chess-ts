// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    profile       Profile?
    waitingPlayer WaitingPlayer?
    whiteMatches  Match[]   @relation("WhitePlayer")
    blackMatches  Match[]   @relation("BlackPlayer")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Chess-specific models
model Profile {
    id            String    @id @default(cuid())
    user          User      @relation(fields: [userId], references: [id])
    userId        String    @unique
    matchHistory  String[]  // Using String[] instead of Int[] to store match IDs
    liveMatchId   String?   // Optional current match ID
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model Match {
    id            String     @id @default(cuid())
    position      String     @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1")
    startedAt     DateTime   @default(now())
    stats         String     @default("")
    whitePlayer   User       @relation("WhitePlayer", fields: [whitePlayerId], references: [id])
    whitePlayerId String
    blackPlayer   User       @relation("BlackPlayer", fields: [blackPlayerId], references: [id])
    blackPlayerId String
    baseTime      Int
    incrementTime Int
    moves         String[]   @default([])
    timestamps    DateTime[] @default([])
    
    @@index([whitePlayerId])
    @@index([blackPlayerId])
}

model WaitingPlayer {
    id            String    @id @default(cuid())
    user          User      @relation(fields: [userId], references: [id])
    userId        String    @unique
    baseTime      Int
    incrementTime Int
    createdAt     DateTime  @default(now())
    matchId       String?   // Optional match ID
    isGuest       Boolean   @default(false)
}

model GuestUser {
    id        String   @id @default(cuid())
    username  String   @unique
    createdAt DateTime @default(now())
}

model Puzzle {
    id              String    @id @default(cuid())
    fen             String
    moves           String[]
    rating          Int
    ratingDeviation Int
    themes          String[]
    openingTags     String[]
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
}
