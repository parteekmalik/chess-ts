/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { WEB3_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_CHESS_MATCH_DISCRIMINATOR = new Uint8Array([
  151, 70, 109, 219, 177, 191, 236, 31,
]);

export function getCreateChessMatchDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_CHESS_MATCH_DISCRIMINATOR
  );
}

export type CreateChessMatchInstruction<
  TProgram extends string = typeof WEB3_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountChessMatch extends string | AccountMeta<string> = string,
  TAccountRegistry extends string | AccountMeta<string> = string,
  TAccountProfile extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountChessMatch extends string
        ? WritableAccount<TAccountChessMatch>
        : TAccountChessMatch,
      TAccountRegistry extends string
        ? WritableAccount<TAccountRegistry>
        : TAccountRegistry,
      TAccountProfile extends string
        ? WritableAccount<TAccountProfile>
        : TAccountProfile,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateChessMatchInstructionData = {
  discriminator: ReadonlyUint8Array;
  matchId: bigint;
  baseTimeSeconds: number;
  incrementSeconds: number;
};

export type CreateChessMatchInstructionDataArgs = {
  matchId: number | bigint;
  baseTimeSeconds: number;
  incrementSeconds: number;
};

export function getCreateChessMatchInstructionDataEncoder(): FixedSizeEncoder<CreateChessMatchInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['matchId', getU64Encoder()],
      ['baseTimeSeconds', getU32Encoder()],
      ['incrementSeconds', getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_CHESS_MATCH_DISCRIMINATOR })
  );
}

export function getCreateChessMatchInstructionDataDecoder(): FixedSizeDecoder<CreateChessMatchInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['matchId', getU64Decoder()],
    ['baseTimeSeconds', getU32Decoder()],
    ['incrementSeconds', getU32Decoder()],
  ]);
}

export function getCreateChessMatchInstructionDataCodec(): FixedSizeCodec<
  CreateChessMatchInstructionDataArgs,
  CreateChessMatchInstructionData
> {
  return combineCodec(
    getCreateChessMatchInstructionDataEncoder(),
    getCreateChessMatchInstructionDataDecoder()
  );
}

export type CreateChessMatchAsyncInput<
  TAccountPayer extends string = string,
  TAccountChessMatch extends string = string,
  TAccountRegistry extends string = string,
  TAccountProfile extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  chessMatch?: Address<TAccountChessMatch>;
  registry?: Address<TAccountRegistry>;
  profile?: Address<TAccountProfile>;
  systemProgram?: Address<TAccountSystemProgram>;
  matchId: CreateChessMatchInstructionDataArgs['matchId'];
  baseTimeSeconds: CreateChessMatchInstructionDataArgs['baseTimeSeconds'];
  incrementSeconds: CreateChessMatchInstructionDataArgs['incrementSeconds'];
};

export async function getCreateChessMatchInstructionAsync<
  TAccountPayer extends string,
  TAccountChessMatch extends string,
  TAccountRegistry extends string,
  TAccountProfile extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof WEB3_PROGRAM_ADDRESS,
>(
  input: CreateChessMatchAsyncInput<
    TAccountPayer,
    TAccountChessMatch,
    TAccountRegistry,
    TAccountProfile,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateChessMatchInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountChessMatch,
    TAccountRegistry,
    TAccountProfile,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? WEB3_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    chessMatch: { value: input.chessMatch ?? null, isWritable: true },
    registry: { value: input.registry ?? null, isWritable: true },
    profile: { value: input.profile ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.chessMatch.value) {
    accounts.chessMatch.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [getU64Encoder().encode(expectSome(args.matchId))],
    });
  }
  if (!accounts.registry.value) {
    accounts.registry.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([114, 101, 103, 105, 115, 116, 114, 121])
        ),
      ],
    });
  }
  if (!accounts.profile.value) {
    accounts.profile.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [getAddressEncoder().encode(expectAddress(accounts.payer.value))],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.chessMatch),
      getAccountMeta(accounts.registry),
      getAccountMeta(accounts.profile),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateChessMatchInstructionDataEncoder().encode(
      args as CreateChessMatchInstructionDataArgs
    ),
  } as CreateChessMatchInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountChessMatch,
    TAccountRegistry,
    TAccountProfile,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CreateChessMatchInput<
  TAccountPayer extends string = string,
  TAccountChessMatch extends string = string,
  TAccountRegistry extends string = string,
  TAccountProfile extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  chessMatch: Address<TAccountChessMatch>;
  registry: Address<TAccountRegistry>;
  profile: Address<TAccountProfile>;
  systemProgram?: Address<TAccountSystemProgram>;
  matchId: CreateChessMatchInstructionDataArgs['matchId'];
  baseTimeSeconds: CreateChessMatchInstructionDataArgs['baseTimeSeconds'];
  incrementSeconds: CreateChessMatchInstructionDataArgs['incrementSeconds'];
};

export function getCreateChessMatchInstruction<
  TAccountPayer extends string,
  TAccountChessMatch extends string,
  TAccountRegistry extends string,
  TAccountProfile extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof WEB3_PROGRAM_ADDRESS,
>(
  input: CreateChessMatchInput<
    TAccountPayer,
    TAccountChessMatch,
    TAccountRegistry,
    TAccountProfile,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateChessMatchInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountChessMatch,
  TAccountRegistry,
  TAccountProfile,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? WEB3_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    chessMatch: { value: input.chessMatch ?? null, isWritable: true },
    registry: { value: input.registry ?? null, isWritable: true },
    profile: { value: input.profile ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.chessMatch),
      getAccountMeta(accounts.registry),
      getAccountMeta(accounts.profile),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateChessMatchInstructionDataEncoder().encode(
      args as CreateChessMatchInstructionDataArgs
    ),
  } as CreateChessMatchInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountChessMatch,
    TAccountRegistry,
    TAccountProfile,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateChessMatchInstruction<
  TProgram extends string = typeof WEB3_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    chessMatch: TAccountMetas[1];
    registry: TAccountMetas[2];
    profile: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: CreateChessMatchInstructionData;
};

export function parseCreateChessMatchInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateChessMatchInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      chessMatch: getNextAccount(),
      registry: getNextAccount(),
      profile: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateChessMatchInstructionDataDecoder().decode(instruction.data),
  };
}
