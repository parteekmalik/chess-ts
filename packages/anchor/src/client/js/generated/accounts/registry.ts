import type {
  Account,
  Address,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "gill";
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
} from "gill";

/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const REGISTRY_DISCRIMINATOR = new Uint8Array([47, 174, 110, 246, 184, 182, 252, 218]);

export function getRegistryDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(REGISTRY_DISCRIMINATOR);
}

export type Registry = {
  discriminator: ReadonlyUint8Array;
  accType: number;
  matchesPlayed: number;
  matchesPending: number;
  matchesPlaying: number;
};

export type RegistryArgs = {
  accType: number;
  matchesPlayed: number;
  matchesPending: number;
  matchesPlaying: number;
};

export function getRegistryEncoder(): FixedSizeEncoder<RegistryArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["accType", getU8Encoder()],
      ["matchesPlayed", getU32Encoder()],
      ["matchesPending", getU32Encoder()],
      ["matchesPlaying", getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REGISTRY_DISCRIMINATOR }),
  );
}

export function getRegistryDecoder(): FixedSizeDecoder<Registry> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["accType", getU8Decoder()],
    ["matchesPlayed", getU32Decoder()],
    ["matchesPending", getU32Decoder()],
    ["matchesPlaying", getU32Decoder()],
  ]);
}

export function getRegistryCodec(): FixedSizeCodec<RegistryArgs, Registry> {
  return combineCodec(getRegistryEncoder(), getRegistryDecoder());
}

export function decodeRegistry<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<Registry, TAddress>;
export function decodeRegistry<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<Registry, TAddress>;
export function decodeRegistry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Registry, TAddress> | MaybeAccount<Registry, TAddress> {
  return decodeAccount(encodedAccount as MaybeEncodedAccount<TAddress>, getRegistryDecoder());
}

export async function fetchRegistry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Registry, TAddress>> {
  const maybeAccount = await fetchMaybeRegistry(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRegistry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Registry, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRegistry(maybeAccount);
}

export async function fetchAllRegistry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<Registry>[]> {
  const maybeAccounts = await fetchAllMaybeRegistry(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRegistry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Registry>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeRegistry(maybeAccount));
}

export function getRegistrySize(): number {
  return 21;
}
