/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  Option,
  OptionOrNullable,
  ReadonlyUint8Array,
} from "gill";
import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
} from "gill";

import type { MatchResult, MatchResultArgs, MatchStatus, MatchStatusArgs, MoveRecord, MoveRecordArgs } from "../types";
import {
  getMatchResultDecoder,
  getMatchResultEncoder,
  getMatchStatusDecoder,
  getMatchStatusEncoder,
  getMoveRecordDecoder,
  getMoveRecordEncoder,
} from "../types";

export const CHESS_MATCH_DISCRIMINATOR = new Uint8Array([72, 241, 122, 67, 252, 229, 79, 237]);

export function getChessMatchDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CHESS_MATCH_DISCRIMINATOR);
}

export interface ChessMatch {
  discriminator: ReadonlyUint8Array;
  accType: number;
  id: bigint;
  white: Option<Address>;
  black: Option<Address>;
  status: MatchStatus;
  whiteWinRatingChange: number;
  blackWinRatingChange: number;
  baseTimeSeconds: number;
  incrementSeconds: number;
  result: MatchResult;
  endsAt: Option<bigint>;
  createdAt: bigint;
  matchedAt: Option<bigint>;
  finishedAt: Option<bigint>;
  fen: string;
  moves: MoveRecord[];
}

export interface ChessMatchArgs {
  accType: number;
  id: number | bigint;
  white: OptionOrNullable<Address>;
  black: OptionOrNullable<Address>;
  status: MatchStatusArgs;
  whiteWinRatingChange: number;
  blackWinRatingChange: number;
  baseTimeSeconds: number;
  incrementSeconds: number;
  result: MatchResultArgs;
  endsAt: OptionOrNullable<number | bigint>;
  createdAt: number | bigint;
  matchedAt: OptionOrNullable<number | bigint>;
  finishedAt: OptionOrNullable<number | bigint>;
  fen: string;
  moves: MoveRecordArgs[];
}

export function getChessMatchEncoder(): Encoder<ChessMatchArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["accType", getU8Encoder()],
      ["id", getU64Encoder()],
      ["white", getOptionEncoder(getAddressEncoder())],
      ["black", getOptionEncoder(getAddressEncoder())],
      ["status", getMatchStatusEncoder()],
      ["whiteWinRatingChange", getU8Encoder()],
      ["blackWinRatingChange", getU8Encoder()],
      ["baseTimeSeconds", getU32Encoder()],
      ["incrementSeconds", getU32Encoder()],
      ["result", getMatchResultEncoder()],
      ["endsAt", getOptionEncoder(getI64Encoder())],
      ["createdAt", getI64Encoder()],
      ["matchedAt", getOptionEncoder(getI64Encoder())],
      ["finishedAt", getOptionEncoder(getI64Encoder())],
      ["fen", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ["moves", getArrayEncoder(getMoveRecordEncoder())],
    ]),
    (value) => ({ ...value, discriminator: CHESS_MATCH_DISCRIMINATOR }),
  );
}

export function getChessMatchDecoder(): Decoder<ChessMatch> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["accType", getU8Decoder()],
    ["id", getU64Decoder()],
    ["white", getOptionDecoder(getAddressDecoder())],
    ["black", getOptionDecoder(getAddressDecoder())],
    ["status", getMatchStatusDecoder()],
    ["whiteWinRatingChange", getU8Decoder()],
    ["blackWinRatingChange", getU8Decoder()],
    ["baseTimeSeconds", getU32Decoder()],
    ["incrementSeconds", getU32Decoder()],
    ["result", getMatchResultDecoder()],
    ["endsAt", getOptionDecoder(getI64Decoder())],
    ["createdAt", getI64Decoder()],
    ["matchedAt", getOptionDecoder(getI64Decoder())],
    ["finishedAt", getOptionDecoder(getI64Decoder())],
    ["fen", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["moves", getArrayDecoder(getMoveRecordDecoder())],
  ]);
}

export function getChessMatchCodec(): Codec<ChessMatchArgs, ChessMatch> {
  return combineCodec(getChessMatchEncoder(), getChessMatchDecoder());
}

export function decodeChessMatch<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<ChessMatch, TAddress>;
export function decodeChessMatch<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<ChessMatch, TAddress>;
export function decodeChessMatch<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<ChessMatch, TAddress> | MaybeAccount<ChessMatch, TAddress> {
  return decodeAccount(encodedAccount as MaybeEncodedAccount<TAddress>, getChessMatchDecoder());
}

export async function fetchChessMatch<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<ChessMatch, TAddress>> {
  const maybeAccount = await fetchMaybeChessMatch(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeChessMatch<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<ChessMatch, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeChessMatch(maybeAccount);
}

export async function fetchAllChessMatch(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<Account<ChessMatch>[]> {
  const maybeAccounts = await fetchAllMaybeChessMatch(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeChessMatch(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<ChessMatch>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeChessMatch(maybeAccount));
}
