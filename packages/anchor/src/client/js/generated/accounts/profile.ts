import type {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
} from "gill";
import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
} from "gill";

/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const PROFILE_DISCRIMINATOR = new Uint8Array([184, 101, 165, 188, 95, 63, 127, 188]);

export function getProfileDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(PROFILE_DISCRIMINATOR);
}

export type Profile = {
  discriminator: ReadonlyUint8Array;
  accType: number;
  wallet: Address;
  rating: number;
  wins: number;
  losses: number;
  draws: number;
  displayName: string;
  matches: Array<bigint>;
};

export type ProfileArgs = {
  accType: number;
  wallet: Address;
  rating: number;
  wins: number;
  losses: number;
  draws: number;
  displayName: string;
  matches: Array<number | bigint>;
};

export function getProfileEncoder(): Encoder<ProfileArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["accType", getU8Encoder()],
      ["wallet", getAddressEncoder()],
      ["rating", getU32Encoder()],
      ["wins", getU32Encoder()],
      ["losses", getU32Encoder()],
      ["draws", getU32Encoder()],
      ["displayName", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ["matches", getArrayEncoder(getU64Encoder())],
    ]),
    (value) => ({ ...value, discriminator: PROFILE_DISCRIMINATOR }),
  );
}

export function getProfileDecoder(): Decoder<Profile> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["accType", getU8Decoder()],
    ["wallet", getAddressDecoder()],
    ["rating", getU32Decoder()],
    ["wins", getU32Decoder()],
    ["losses", getU32Decoder()],
    ["draws", getU32Decoder()],
    ["displayName", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["matches", getArrayDecoder(getU64Decoder())],
  ]);
}

export function getProfileCodec(): Codec<ProfileArgs, Profile> {
  return combineCodec(getProfileEncoder(), getProfileDecoder());
}

export function decodeProfile<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<Profile, TAddress>;
export function decodeProfile<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<Profile, TAddress>;
export function decodeProfile<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Profile, TAddress> | MaybeAccount<Profile, TAddress> {
  return decodeAccount(encodedAccount as MaybeEncodedAccount<TAddress>, getProfileDecoder());
}

export async function fetchProfile<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Profile, TAddress>> {
  const maybeAccount = await fetchMaybeProfile(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProfile<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Profile, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeProfile(maybeAccount);
}

export async function fetchAllProfile(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<Profile>[]> {
  const maybeAccounts = await fetchAllMaybeProfile(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeProfile(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Profile>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeProfile(maybeAccount));
}
