/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type { Address, ReadonlyUint8Array } from "gill";
import { containsBytes, fixEncoderSize, getBytesEncoder } from "gill";

import type {
  ParsedCleanProfileInstruction,
  ParsedCloseChessMatchInstruction,
  ParsedCreateChessMatchInstruction,
  ParsedInitializeProfileInstruction,
  ParsedInitializeRegistryInstruction,
  ParsedJoinChessMatchInstruction,
  ParsedMakeMoveInstruction,
} from "../instructions";
import { Web3IDL } from '../../../../web3-exports';

export const WEB3_PROGRAM_ADDRESS = Web3IDL.address as Address;

export enum Web3Account {
  ChessMatch,
  Profile,
  Registry,
}

export function identifyWeb3Account(account: { data: ReadonlyUint8Array } | ReadonlyUint8Array): Web3Account {
  const data = "data" in account ? account.data : account;
  if (containsBytes(data, fixEncoderSize(getBytesEncoder(), 8).encode(new Uint8Array([72, 241, 122, 67, 252, 229, 79, 237])), 0)) {
    return Web3Account.ChessMatch;
  }
  if (containsBytes(data, fixEncoderSize(getBytesEncoder(), 8).encode(new Uint8Array([184, 101, 165, 188, 95, 63, 127, 188])), 0)) {
    return Web3Account.Profile;
  }
  if (containsBytes(data, fixEncoderSize(getBytesEncoder(), 8).encode(new Uint8Array([47, 174, 110, 246, 184, 182, 252, 218])), 0)) {
    return Web3Account.Registry;
  }
  throw new Error("The provided account could not be identified as a web3 account.");
}

export enum Web3Instruction {
  CleanProfile,
  CloseChessMatch,
  CreateChessMatch,
  InitializeProfile,
  InitializeRegistry,
  JoinChessMatch,
  MakeMove,
}

export function identifyWeb3Instruction(instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array): Web3Instruction {
  const data = "data" in instruction ? instruction.data : instruction;
  if (containsBytes(data, fixEncoderSize(getBytesEncoder(), 8).encode(new Uint8Array([200, 172, 74, 131, 246, 80, 72, 26])), 0)) {
    return Web3Instruction.CleanProfile;
  }
  if (containsBytes(data, fixEncoderSize(getBytesEncoder(), 8).encode(new Uint8Array([114, 13, 159, 131, 41, 71, 181, 151])), 0)) {
    return Web3Instruction.CloseChessMatch;
  }
  if (containsBytes(data, fixEncoderSize(getBytesEncoder(), 8).encode(new Uint8Array([151, 70, 109, 219, 177, 191, 236, 31])), 0)) {
    return Web3Instruction.CreateChessMatch;
  }
  if (containsBytes(data, fixEncoderSize(getBytesEncoder(), 8).encode(new Uint8Array([32, 145, 77, 213, 58, 39, 251, 234])), 0)) {
    return Web3Instruction.InitializeProfile;
  }
  if (containsBytes(data, fixEncoderSize(getBytesEncoder(), 8).encode(new Uint8Array([189, 181, 20, 17, 174, 57, 249, 59])), 0)) {
    return Web3Instruction.InitializeRegistry;
  }
  if (containsBytes(data, fixEncoderSize(getBytesEncoder(), 8).encode(new Uint8Array([54, 143, 175, 160, 64, 21, 123, 211])), 0)) {
    return Web3Instruction.JoinChessMatch;
  }
  if (containsBytes(data, fixEncoderSize(getBytesEncoder(), 8).encode(new Uint8Array([78, 77, 152, 203, 222, 211, 208, 233])), 0)) {
    return Web3Instruction.MakeMove;
  }
  throw new Error("The provided instruction could not be identified as a web3 instruction.");
}

export type ParsedWeb3Instruction<TProgram extends string = "hvD9qm7aUZmbosN7pyYHKNAgthyWU8x1ybxPJoNv3LU"> =
  | ({
      instructionType: Web3Instruction.CleanProfile;
    } & ParsedCleanProfileInstruction<TProgram>)
  | ({
      instructionType: Web3Instruction.CloseChessMatch;
    } & ParsedCloseChessMatchInstruction<TProgram>)
  | ({
      instructionType: Web3Instruction.CreateChessMatch;
    } & ParsedCreateChessMatchInstruction<TProgram>)
  | ({
      instructionType: Web3Instruction.InitializeProfile;
    } & ParsedInitializeProfileInstruction<TProgram>)
  | ({
      instructionType: Web3Instruction.InitializeRegistry;
    } & ParsedInitializeRegistryInstruction<TProgram>)
  | ({
      instructionType: Web3Instruction.JoinChessMatch;
    } & ParsedJoinChessMatchInstruction<TProgram>)
  | ({
      instructionType: Web3Instruction.MakeMove;
    } & ParsedMakeMoveInstruction<TProgram>);
