import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "gill";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "gill";

import type { ResolvedAccount } from "../shared";
import { WEB3_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory } from "../shared";

/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const INITIALIZE_REGISTRY_DISCRIMINATOR = new Uint8Array([189, 181, 20, 17, 174, 57, 249, 59]);

export function getInitializeRegistryDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(INITIALIZE_REGISTRY_DISCRIMINATOR);
}

export type InitializeRegistryInstruction<
  TProgram extends string = typeof WEB3_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountRegistry extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends string | AccountMeta<string> = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string ? WritableSignerAccount<TAccountPayer> & AccountSignerMeta<TAccountPayer> : TAccountPayer,
      TAccountRegistry extends string ? WritableAccount<TAccountRegistry> : TAccountRegistry,
      TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeRegistryInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitializeRegistryInstructionDataArgs = {};

export function getInitializeRegistryInstructionDataEncoder(): FixedSizeEncoder<InitializeRegistryInstructionDataArgs> {
  return transformEncoder(getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]), (value) => ({
    ...value,
    discriminator: INITIALIZE_REGISTRY_DISCRIMINATOR,
  }));
}

export function getInitializeRegistryInstructionDataDecoder(): FixedSizeDecoder<InitializeRegistryInstructionData> {
  return getStructDecoder([["discriminator", fixDecoderSize(getBytesDecoder(), 8)]]);
}

export function getInitializeRegistryInstructionDataCodec(): FixedSizeCodec<
  InitializeRegistryInstructionDataArgs,
  InitializeRegistryInstructionData
> {
  return combineCodec(getInitializeRegistryInstructionDataEncoder(), getInitializeRegistryInstructionDataDecoder());
}

export type InitializeRegistryAsyncInput<
  TAccountPayer extends string = string,
  TAccountRegistry extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  registry?: Address<TAccountRegistry>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getInitializeRegistryInstructionAsync<
  TAccountPayer extends string,
  TAccountRegistry extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof WEB3_PROGRAM_ADDRESS,
>(
  input: InitializeRegistryAsyncInput<TAccountPayer, TAccountRegistry, TAccountSystemProgram>,
  config?: { programAddress?: TProgramAddress },
): Promise<InitializeRegistryInstruction<TProgramAddress, TAccountPayer, TAccountRegistry, TAccountSystemProgram>> {
  // Program address.
  const programAddress = config?.programAddress ?? WEB3_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    registry: { value: input.registry ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;

  // Resolve default values.
  if (!accounts.registry.value) {
    accounts.registry.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [getBytesEncoder().encode(new Uint8Array([114, 101, 103, 105, 115, 116, 114, 121]))],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [getAccountMeta(accounts.payer), getAccountMeta(accounts.registry), getAccountMeta(accounts.systemProgram)],
    programAddress,
    data: getInitializeRegistryInstructionDataEncoder().encode({}),
  } as InitializeRegistryInstruction<TProgramAddress, TAccountPayer, TAccountRegistry, TAccountSystemProgram>;

  return instruction;
}

export type InitializeRegistryInput<
  TAccountPayer extends string = string,
  TAccountRegistry extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  registry: Address<TAccountRegistry>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitializeRegistryInstruction<
  TAccountPayer extends string,
  TAccountRegistry extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof WEB3_PROGRAM_ADDRESS,
>(
  input: InitializeRegistryInput<TAccountPayer, TAccountRegistry, TAccountSystemProgram>,
  config?: { programAddress?: TProgramAddress },
): InitializeRegistryInstruction<TProgramAddress, TAccountPayer, TAccountRegistry, TAccountSystemProgram> {
  // Program address.
  const programAddress = config?.programAddress ?? WEB3_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    registry: { value: input.registry ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [getAccountMeta(accounts.payer), getAccountMeta(accounts.registry), getAccountMeta(accounts.systemProgram)],
    programAddress,
    data: getInitializeRegistryInstructionDataEncoder().encode({}),
  } as InitializeRegistryInstruction<TProgramAddress, TAccountPayer, TAccountRegistry, TAccountSystemProgram>;

  return instruction;
}

export type ParsedInitializeRegistryInstruction<
  TProgram extends string = typeof WEB3_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    registry: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: InitializeRegistryInstructionData;
};

export function parseInitializeRegistryInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(
  instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>,
): ParsedInitializeRegistryInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      registry: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeRegistryInstructionDataDecoder().decode(instruction.data),
  };
}
