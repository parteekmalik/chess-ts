/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "gill";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "gill";

import type { ResolvedAccount } from "../shared";
import { WEB3_PROGRAM_ADDRESS } from "../programs";
import { expectAddress, getAccountMetaFactory } from "../shared";

export const JOIN_CHESS_MATCH_DISCRIMINATOR = new Uint8Array([54, 143, 175, 160, 64, 21, 123, 211]);

export function getJoinChessMatchDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(JOIN_CHESS_MATCH_DISCRIMINATOR);
}

export type JoinChessMatchInstruction<
  TProgram extends string = typeof WEB3_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountChessMatch extends string | AccountMeta<string> = string,
  TAccountRegistry extends string | AccountMeta<string> = string,
  TAccountPlayerProfile extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string ? WritableSignerAccount<TAccountPayer> & AccountSignerMeta<TAccountPayer> : TAccountPayer,
      TAccountChessMatch extends string ? WritableAccount<TAccountChessMatch> : TAccountChessMatch,
      TAccountRegistry extends string ? WritableAccount<TAccountRegistry> : TAccountRegistry,
      TAccountPlayerProfile extends string ? WritableAccount<TAccountPlayerProfile> : TAccountPlayerProfile,
      ...TRemainingAccounts,
    ]
  >;

export interface JoinChessMatchInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface JoinChessMatchInstructionDataArgs {}

export function getJoinChessMatchInstructionDataEncoder(): FixedSizeEncoder<JoinChessMatchInstructionDataArgs> {
  return transformEncoder(getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]), (value) => ({
    ...value,
    discriminator: JOIN_CHESS_MATCH_DISCRIMINATOR,
  }));
}

export function getJoinChessMatchInstructionDataDecoder(): FixedSizeDecoder<JoinChessMatchInstructionData> {
  return getStructDecoder([["discriminator", fixDecoderSize(getBytesDecoder(), 8)]]);
}

export function getJoinChessMatchInstructionDataCodec(): FixedSizeCodec<JoinChessMatchInstructionDataArgs, JoinChessMatchInstructionData> {
  return combineCodec(getJoinChessMatchInstructionDataEncoder(), getJoinChessMatchInstructionDataDecoder());
}

export interface JoinChessMatchAsyncInput<
  TAccountPayer extends string = string,
  TAccountChessMatch extends string = string,
  TAccountRegistry extends string = string,
  TAccountPlayerProfile extends string = string,
> {
  payer: TransactionSigner<TAccountPayer>;
  chessMatch: Address<TAccountChessMatch>;
  registry?: Address<TAccountRegistry>;
  playerProfile?: Address<TAccountPlayerProfile>;
}

export async function getJoinChessMatchInstructionAsync<
  TAccountPayer extends string,
  TAccountChessMatch extends string,
  TAccountRegistry extends string,
  TAccountPlayerProfile extends string,
  TProgramAddress extends Address = typeof WEB3_PROGRAM_ADDRESS,
>(
  input: JoinChessMatchAsyncInput<TAccountPayer, TAccountChessMatch, TAccountRegistry, TAccountPlayerProfile>,
  config?: { programAddress?: TProgramAddress },
): Promise<JoinChessMatchInstruction<TProgramAddress, TAccountPayer, TAccountChessMatch, TAccountRegistry, TAccountPlayerProfile>> {
  // Program address.
  const programAddress = config?.programAddress ?? WEB3_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    chessMatch: { value: input.chessMatch ?? null, isWritable: true },
    registry: { value: input.registry ?? null, isWritable: true },
    playerProfile: { value: input.playerProfile ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;

  // Resolve default values.
  if (!accounts.registry.value) {
    accounts.registry.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [getBytesEncoder().encode(new Uint8Array([114, 101, 103, 105, 115, 116, 114, 121]))],
    });
  }
  if (!accounts.playerProfile.value) {
    accounts.playerProfile.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [getAddressEncoder().encode(expectAddress(accounts.payer.value))],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.chessMatch),
      getAccountMeta(accounts.registry),
      getAccountMeta(accounts.playerProfile),
    ],
    programAddress,
    data: getJoinChessMatchInstructionDataEncoder().encode({}),
  } as JoinChessMatchInstruction<TProgramAddress, TAccountPayer, TAccountChessMatch, TAccountRegistry, TAccountPlayerProfile>;

  return instruction;
}

export interface JoinChessMatchInput<
  TAccountPayer extends string = string,
  TAccountChessMatch extends string = string,
  TAccountRegistry extends string = string,
  TAccountPlayerProfile extends string = string,
> {
  payer: TransactionSigner<TAccountPayer>;
  chessMatch: Address<TAccountChessMatch>;
  registry: Address<TAccountRegistry>;
  playerProfile: Address<TAccountPlayerProfile>;
}

export function getJoinChessMatchInstruction<
  TAccountPayer extends string,
  TAccountChessMatch extends string,
  TAccountRegistry extends string,
  TAccountPlayerProfile extends string,
  TProgramAddress extends Address = typeof WEB3_PROGRAM_ADDRESS,
>(
  input: JoinChessMatchInput<TAccountPayer, TAccountChessMatch, TAccountRegistry, TAccountPlayerProfile>,
  config?: { programAddress?: TProgramAddress },
): JoinChessMatchInstruction<TProgramAddress, TAccountPayer, TAccountChessMatch, TAccountRegistry, TAccountPlayerProfile> {
  // Program address.
  const programAddress = config?.programAddress ?? WEB3_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    chessMatch: { value: input.chessMatch ?? null, isWritable: true },
    registry: { value: input.registry ?? null, isWritable: true },
    playerProfile: { value: input.playerProfile ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.chessMatch),
      getAccountMeta(accounts.registry),
      getAccountMeta(accounts.playerProfile),
    ],
    programAddress,
    data: getJoinChessMatchInstructionDataEncoder().encode({}),
  } as JoinChessMatchInstruction<TProgramAddress, TAccountPayer, TAccountChessMatch, TAccountRegistry, TAccountPlayerProfile>;

  return instruction;
}

export interface ParsedJoinChessMatchInstruction<
  TProgram extends string = typeof WEB3_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    chessMatch: TAccountMetas[1];
    registry: TAccountMetas[2];
    playerProfile: TAccountMetas[3];
  };
  data: JoinChessMatchInstructionData;
}

export function parseJoinChessMatchInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(
  instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>,
): ParsedJoinChessMatchInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      chessMatch: getNextAccount(),
      registry: getNextAccount(),
      playerProfile: getNextAccount(),
    },
    data: getJoinChessMatchInstructionDataDecoder().decode(instruction.data),
  };
}
