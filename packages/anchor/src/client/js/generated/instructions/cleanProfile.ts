/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  FixedSizeCodec,
  FixedSizeDecoder,
  FixedSizeEncoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "gill";
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from "gill";

import type { ResolvedAccount } from "../shared";
import { WEB3_PROGRAM_ADDRESS } from "../programs";
import { expectAddress, getAccountMetaFactory } from "../shared";

export const CLEAN_PROFILE_DISCRIMINATOR = new Uint8Array([200, 172, 74, 131, 246, 80, 72, 26]);

export function getCleanProfileDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CLEAN_PROFILE_DISCRIMINATOR);
}

export type CleanProfileInstruction<
  TProgram extends string = typeof WEB3_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountProfile extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends string | AccountMeta<string> = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string ? WritableSignerAccount<TAccountPayer> & AccountSignerMeta<TAccountPayer> : TAccountPayer,
      TAccountProfile extends string ? WritableAccount<TAccountProfile> : TAccountProfile,
      TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface CleanProfileInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface CleanProfileInstructionDataArgs {}

export function getCleanProfileInstructionDataEncoder(): FixedSizeEncoder<CleanProfileInstructionDataArgs> {
  return transformEncoder(getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]), (value) => ({
    ...value,
    discriminator: CLEAN_PROFILE_DISCRIMINATOR,
  }));
}

export function getCleanProfileInstructionDataDecoder(): FixedSizeDecoder<CleanProfileInstructionData> {
  return getStructDecoder([["discriminator", fixDecoderSize(getBytesDecoder(), 8)]]);
}

export function getCleanProfileInstructionDataCodec(): FixedSizeCodec<CleanProfileInstructionDataArgs, CleanProfileInstructionData> {
  return combineCodec(getCleanProfileInstructionDataEncoder(), getCleanProfileInstructionDataDecoder());
}

export interface CleanProfileAsyncInput<
  TAccountPayer extends string = string,
  TAccountProfile extends string = string,
  TAccountSystemProgram extends string = string,
> {
  payer: TransactionSigner<TAccountPayer>;
  profile?: Address<TAccountProfile>;
  systemProgram?: Address<TAccountSystemProgram>;
}

export async function getCleanProfileInstructionAsync<
  TAccountPayer extends string,
  TAccountProfile extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof WEB3_PROGRAM_ADDRESS,
>(
  input: CleanProfileAsyncInput<TAccountPayer, TAccountProfile, TAccountSystemProgram>,
  config?: { programAddress?: TProgramAddress },
): Promise<CleanProfileInstruction<TProgramAddress, TAccountPayer, TAccountProfile, TAccountSystemProgram>> {
  // Program address.
  const programAddress = config?.programAddress ?? WEB3_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    profile: { value: input.profile ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;

  // Resolve default values.
  if (!accounts.profile.value) {
    accounts.profile.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [getAddressEncoder().encode(expectAddress(accounts.payer.value))],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [getAccountMeta(accounts.payer), getAccountMeta(accounts.profile), getAccountMeta(accounts.systemProgram)],
    programAddress,
    data: getCleanProfileInstructionDataEncoder().encode({}),
  } as CleanProfileInstruction<TProgramAddress, TAccountPayer, TAccountProfile, TAccountSystemProgram>;

  return instruction;
}

export interface CleanProfileInput<
  TAccountPayer extends string = string,
  TAccountProfile extends string = string,
  TAccountSystemProgram extends string = string,
> {
  payer: TransactionSigner<TAccountPayer>;
  profile: Address<TAccountProfile>;
  systemProgram?: Address<TAccountSystemProgram>;
}

export function getCleanProfileInstruction<
  TAccountPayer extends string,
  TAccountProfile extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof WEB3_PROGRAM_ADDRESS,
>(
  input: CleanProfileInput<TAccountPayer, TAccountProfile, TAccountSystemProgram>,
  config?: { programAddress?: TProgramAddress },
): CleanProfileInstruction<TProgramAddress, TAccountPayer, TAccountProfile, TAccountSystemProgram> {
  // Program address.
  const programAddress = config?.programAddress ?? WEB3_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    profile: { value: input.profile ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [getAccountMeta(accounts.payer), getAccountMeta(accounts.profile), getAccountMeta(accounts.systemProgram)],
    programAddress,
    data: getCleanProfileInstructionDataEncoder().encode({}),
  } as CleanProfileInstruction<TProgramAddress, TAccountPayer, TAccountProfile, TAccountSystemProgram>;

  return instruction;
}

export interface ParsedCleanProfileInstruction<
  TProgram extends string = typeof WEB3_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    profile: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: CleanProfileInstructionData;
}

export function parseCleanProfileInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(
  instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>,
): ParsedCleanProfileInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      profile: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCleanProfileInstructionDataDecoder().decode(instruction.data),
  };
}
