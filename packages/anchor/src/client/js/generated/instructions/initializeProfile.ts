import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  Codec,
  Decoder,
  Encoder,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "gill";
import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
} from "gill";

import type { ResolvedAccount } from "../shared";
import { WEB3_PROGRAM_ADDRESS } from "../programs";
import { expectAddress, getAccountMetaFactory } from "../shared";

/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const INITIALIZE_PROFILE_DISCRIMINATOR = new Uint8Array([32, 145, 77, 213, 58, 39, 251, 234]);

export function getInitializeProfileDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(INITIALIZE_PROFILE_DISCRIMINATOR);
}

export type InitializeProfileInstruction<
  TProgram extends string = typeof WEB3_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountProfile extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends string | AccountMeta<string> = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string ? WritableSignerAccount<TAccountPayer> & AccountSignerMeta<TAccountPayer> : TAccountPayer,
      TAccountProfile extends string ? WritableAccount<TAccountProfile> : TAccountProfile,
      TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeProfileInstructionData = {
  discriminator: ReadonlyUint8Array;
  name: string;
};

export type InitializeProfileInstructionDataArgs = { name: string };

export function getInitializeProfileInstructionDataEncoder(): Encoder<InitializeProfileInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["name", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_PROFILE_DISCRIMINATOR }),
  );
}

export function getInitializeProfileInstructionDataDecoder(): Decoder<InitializeProfileInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["name", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getInitializeProfileInstructionDataCodec(): Codec<InitializeProfileInstructionDataArgs, InitializeProfileInstructionData> {
  return combineCodec(getInitializeProfileInstructionDataEncoder(), getInitializeProfileInstructionDataDecoder());
}

export type InitializeProfileAsyncInput<
  TAccountPayer extends string = string,
  TAccountProfile extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  profile?: Address<TAccountProfile>;
  systemProgram?: Address<TAccountSystemProgram>;
  name: InitializeProfileInstructionDataArgs["name"];
};

export async function getInitializeProfileInstructionAsync<
  TAccountPayer extends string,
  TAccountProfile extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof WEB3_PROGRAM_ADDRESS,
>(
  input: InitializeProfileAsyncInput<TAccountPayer, TAccountProfile, TAccountSystemProgram>,
  config?: { programAddress?: TProgramAddress },
): Promise<InitializeProfileInstruction<TProgramAddress, TAccountPayer, TAccountProfile, TAccountSystemProgram>> {
  // Program address.
  const programAddress = config?.programAddress ?? WEB3_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    profile: { value: input.profile ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.profile.value) {
    accounts.profile.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [getAddressEncoder().encode(expectAddress(accounts.payer.value))],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [getAccountMeta(accounts.payer), getAccountMeta(accounts.profile), getAccountMeta(accounts.systemProgram)],
    programAddress,
    data: getInitializeProfileInstructionDataEncoder().encode(args as InitializeProfileInstructionDataArgs),
  } as InitializeProfileInstruction<TProgramAddress, TAccountPayer, TAccountProfile, TAccountSystemProgram>;

  return instruction;
}

export type InitializeProfileInput<
  TAccountPayer extends string = string,
  TAccountProfile extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  profile: Address<TAccountProfile>;
  systemProgram?: Address<TAccountSystemProgram>;
  name: InitializeProfileInstructionDataArgs["name"];
};

export function getInitializeProfileInstruction<
  TAccountPayer extends string,
  TAccountProfile extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof WEB3_PROGRAM_ADDRESS,
>(
  input: InitializeProfileInput<TAccountPayer, TAccountProfile, TAccountSystemProgram>,
  config?: { programAddress?: TProgramAddress },
): InitializeProfileInstruction<TProgramAddress, TAccountPayer, TAccountProfile, TAccountSystemProgram> {
  // Program address.
  const programAddress = config?.programAddress ?? WEB3_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    profile: { value: input.profile ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [getAccountMeta(accounts.payer), getAccountMeta(accounts.profile), getAccountMeta(accounts.systemProgram)],
    programAddress,
    data: getInitializeProfileInstructionDataEncoder().encode(args as InitializeProfileInstructionDataArgs),
  } as InitializeProfileInstruction<TProgramAddress, TAccountPayer, TAccountProfile, TAccountSystemProgram>;

  return instruction;
}

export type ParsedInitializeProfileInstruction<
  TProgram extends string = typeof WEB3_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    profile: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: InitializeProfileInstructionData;
};

export function parseInitializeProfileInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(
  instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>,
): ParsedInitializeProfileInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      profile: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeProfileInstructionDataDecoder().decode(instruction.data),
  };
}
